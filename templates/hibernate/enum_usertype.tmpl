{{- define "enum_usertype" -}}
package {{ .package_name }};
// Generated by pg2any. DO NOT EDIT THIS FILE

import java.io.Serializable;
import java.sql.Types;

import org.hibernate.HibernateException;
import org.hibernate.usertype.UserType;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.postgresql.util.PGobject;

public class {{ .name }}UserType implements UserType {
  protected Class<{{ .name }}> getEnumClass() {
    return {{ .name }}.class;
  }

  @Override
  public Object nullSafeGet(
      ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
      throws HibernateException, SQLException {
    Object o = rs.getObject(names[0]);
    if (o == null) {
      return null;
    }
    for ({{ .name }} enumValue : {{ .name }}.values()) {
      if (enumValue.getValue().equals(({{ .dt }}) o)) {
        return enumValue;
      }
    }
    throw new UnsupportedOperationException("value=" + o + ", columnLabel=" + names[0]);
  }

  @Override
  public void nullSafeSet(
      PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)
      throws HibernateException, SQLException {
    if (value == null) {
      st.setNull(index, Types.OTHER);
    } else {
      PGobject pgobject = new PGobject();
      pgobject.setType("{{ .snake }}");
      try {
        pgobject.setValue((({{ .name }}) value).get{{ .dt }}());
      } catch (SQLException e) {
        throw new RuntimeException(e);
      }
      st.setObject(index, pgobject, Types.OTHER);
    }
  }


  @Override
  public int[] sqlTypes() {
    return new int[] {Types.VARCHAR};
  }

  @Override
  public Class<?> returnedClass() {
    return getEnumClass();
  }

  @Override
  public boolean equals(Object x, Object y) throws HibernateException {
    if (x == y) {
      return true;
    }
    if (x == null || y == null) {
      return false;
    }
    return java.util.Objects.deepEquals(x, y);
  }

  @Override
  public int hashCode(Object x) throws HibernateException {
    return (x == null) ? 0 : x.hashCode();
  }

  @Override
  public Object deepCopy(Object value) throws HibernateException {
    return value;
  }

  @Override
  public boolean isMutable() {
    return false;
  }

  @Override
  public Serializable disassemble(Object value) throws HibernateException {
    return (Serializable) value;
  }

  @Override
  public Object assemble(Serializable cached, Object owner) throws HibernateException {
    return cached;
  }

  @Override
  public Object replace(Object original, Object target, Object owner) throws HibernateException {
    return original;
  }
}
{{ end }}